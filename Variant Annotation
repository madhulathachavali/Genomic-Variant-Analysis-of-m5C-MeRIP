## Data source: SRX24250599 The data source is from the Sequence Read Archive (SRA) under the accession SRX24250599, submitted by Guangdong Provincial People's Hospital. It involves m5C MeRIP sequencing of PANC-1 cells treated with CAF-derived Evs, sequenced using an Illumina NovaSeq 6000.

# Step 1: Variant Annotation
# install annovar 
cd ~/Downloads
# Extract the downloaded package:
tar -zxvf annovar.latest.tar.gz
#Here is a list of the output files generated by ANNOVAR:

Multianno Output File (Text)

Path: /Users/madhuchavali/Downloads/results/annotated.hg38_multianno.txt
Description: This file contains the annotated variants with all the selected protocols' information.
Multianno Output File (VCF)

Path: /Users/madhuchavali/Downloads/results/annotated.hg38_multianno.vcf
Description: This is the VCF format of the annotated variants, containing similar information as the text output file.
RefGene Variant Function File

Path: /Users/madhuchavali/Downloads/results/annotated.refGene.variant_function
Description: This file contains the functional annotation of the variants based on the RefGene database.
RefGene Exonic Variant Function File

Path: /Users/madhuchavali/Downloads/results/annotated.refGene.exonic_variant_function
Description: This file contains the exonic variant functional annotations.
Filtered Variants (ExAC)

Path: /Users/madhuchavali/Downloads/results/annotated.hg38_exac03_filtered
Description: This file contains variants that do not match the filtering criteria specified by the ExAC database.
Dropped Variants (ExAC)

Path: /Users/madhuchavali/Downloads/results/annotated.hg38_exac03_dropped
Description: This file contains variants that match the filtering criteria specified by the ExAC database.

# Download and Extract ANNOVAR:
#1.  Download ANNOVAR
curl -O http://www.openbioinformatics.org/annovar/download/0wgxR2rIVP/annovar.latest.tar.gz

# Extract the ANNOVAR package
tar -zxvf annovar.latest.tar.gz

# Move the extracted ANNOVAR directory to /usr/local
sudo mv annovar /usr/local/
#2. Update the PATH Environment Variable:
# Open the .zshrc file in a text editor
nano ~/.zshrc

# Add the following line to the file
export PATH=$PATH:/usr/local/annovar

# Save and exit the editor (CTRL+X, then Y, then ENTER)

# Source the updated .zshrc file to apply the changes
source ~/.zshrc
#3. Download Required Databases for ANNOVAR:
# Change to the ANNOVAR directory
cd /usr/local/annovar

# Download the refGene database
perl annotate_variation.pl -downdb -webfrom annovar -buildver hg38 refGene humandb/

# Download the exact database
perl annotate_variation.pl -downdb -webfrom annovar -buildver hg38 exac03 humandb/

#4. Annotate Variants Using ANNOVAR:
# Create a directory for the results
mkdir -p /Users/madhuchavali/Downloads/results/

# Annotate the variants using ANNOVAR
perl table_annovar.pl /Users/madhuchavali/Downloads/variants.vcf /usr/local/annovar/humandb/ -buildver hg38 -out /Users/madhuchavali/Downloads/results/annotated -remove -protocol refGene,exac03 -operation g,f -nastring . -vcfinput
# output files 

1./Users/madhuchavali/Downloads/results/annotated.hg38_multianno.txt
2./Users/madhuchavali/Downloads/results/annotated.hg38_multianno.vcf
3./Users/madhuchavali/Downloads/results/annotated.refGene.variant_function
4./Users/madhuchavali/Downloads/results/annotated.refGene.exonic_variant_function
5./Users/madhuchavali/Downloads/results/annotated.hg38_exac03_filtered
6./Users/madhuchavali/Downloads/results/annotated.hg38_exac03_dropped

# Filtered variants: resutls in downloads
## cd results
ls
## view contents of filtered files

head annotated.hg38_multianno.txt
head annotated.hg38_multianno.vcf

### Variant Annotation Results

## Annotated Variants (VCF Format)

The following is a sample of the annotated variants in VCF format obtained after running ANNOVAR and filtering the variants:

```plaintext
##fileformat=VCFv4.2
##FILTER=<ID=LowQual,Description="Low quality">
##FORMAT=<ID=AD,Number=R,Type=Integer,Description="Allelic depths for the ref and alt alleles in the order listed">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Approximate read depth (reads with MQ=255 or with bad mates are filtered)">
##FORMAT=<ID=GQ,Number=1,Type=Integer,Description="Genotype Quality">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=PL,Number=G,Type=Integer,Description="Normalized, Phred-scaled likelihoods for genotypes as defined in the VCF specification">
##GATKCommandLine=<ID=HaplotypeCaller,CommandLine="HaplotypeCaller --output /Users/madhuchavali/Downloads/variants.vcf --input /Users/madhuchavali/Downloads/aligned_reads_sorted_rg.bam --reference /Users/madhuchavali/Downloads/Homo_sapiens.GRCh38.dna.primary_assembly.fa --use-posteriors-to-calculate-qual false --dont-use-dragstr-priors false --use-new-qual-calculator true --annotate-with-num-discovered-alleles false --heterozygosity 0.001 --indel-heterozygosity 1.25E-4 --heterozygosity-stdev 0.01 --standard-min-confidence-threshold-for-calling 30.0 --max-alternate-alleles 6 --max-genotype-count 1024 --sample-ploidy 2 --num-reference-samples-if-no-call 0 --genotype-assignment-method USE_PLS_TO_ASSIGN --contamination-fraction-to-filter 0.0 --output-mode EMIT_VARIANTS_ONLY --all-site-pls false --flow-likelihood-parallel-threads 0 --flow-likelihood-optimized-comp false --flow-use-t0-tag false --flow-probability-threshold 0.003 --flow-remove-non-single-base-pair-indels false --flow-remove-one-zero-probs fal

# Variant Annotation Results

## Annotated Variants (VCF Format)

This file contains genetic variants identified in our sample after annotation and filtering.

### VCF Header Explanation

- **File Format**: VCF version 4.2
- **Filters**:
  - **LowQual**: Low quality variants.
- **Format Fields**:
  - **AD**: Allelic depths (number of reads for each allele).
  - **DP**: Depth of coverage (number of reads covering the variant).
  - **GQ**: Genotype quality (confidence in the genotype call).
  - **GT**: Genotype (e.g., 0/1 for heterozygous).
  - **PL**: Phred-scaled likelihoods of genotypes.
- **Command Line**: Command used to call variants with GATK HaplotypeCaller.
- **INFO Fields**:
  - **AC**: Allele count for each alternate allele.
  - **AF**: Allele frequency for each alternate allele.

### Sample Output (First Few Lines)

```plaintext
##fileformat=VCFv4.2
##FILTER=<ID=LowQual,Description="Low quality">
##FORMAT=<ID=AD,Number=R,Type=Integer,Description="Allelic depths for the ref and alt alleles in the order listed">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Approximate read depth (reads with MQ=255 or with bad mates are filtered)">
##FORMAT=<ID=GQ,Number=1,Type=Integer,Description="Genotype Quality">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=PL,Number=G,Type=Integer,Description="Normalized, Phred-scaled likelihoods for genotypes as defined in the VCF specification">
##GATKCommandLine=<ID=HaplotypeCaller,CommandLine="HaplotypeCaller ... --version 4.3.0.0",Date="June 14, 2024, 2:06:03 PM PDT">
##INFO=<ID=AC,Number=A,Type=Integer,Description="Allele count in genotypes, for each ALT allele, in the same order as listed">
##INFO=<ID=AF,Number=A,Type=Float,Description="Allele Frequency, for each ALT allele, in the same order as listed">



# Next Steps in Variant Analysis
Filter Variants:

Applying additional filters to narrow down your variants of interest. filter based on variant quality, allele frequency, or functional impact.
# install VCF tools
brew install vcftools

#2. Filter Variants by Quality
vcftools --vcf annotated.hg38_multianno.vcf --minQ 30 --recode --out filtered_variants

# Functional Annotation
Annotated high-quality variants with SnpEff to predict their impact on genes and proteins.

# VCF Analysis in Kaggle Notebook

## Step 1: Install Required Libraries

```python
!pip install pandas vcfpy
import pandas as pd
import vcfpy

# Load VCF file
vcf_reader = vcfpy.Reader.from_path('/kaggle/input/filtered-varients/annotated.hg38_multianno.vcf')

# Initialize lists to store data
chrom = []
pos = []
ids = []
ref = []
alt = []
qual = []
filter_status = []
info = []

# Extract data from VCF file
for record in vcf_reader:
    chrom.append(record.CHROM)
    pos.append(record.POS)
    ids.append(record.ID)
    ref.append(record.REF)
    alt.append(','.join(str(a) for a in record.ALT))
    qual.append(record.QUAL)
    filter_status.append(record.FILTER)
    info.append(record.INFO)

# Create a DataFrame
df = pd.DataFrame({
    'CHROM': chrom,
    'POS': pos,
    'ID': ids,
    'REF': ref,
    'ALT': alt,
    'QUAL': qual,
    'FILTER': filter_status,
    'INFO': info
})

# Display the DataFrame
df.head()
# Filter variants with a minimum quality score of 30
high_quality_variants = df[df['QUAL'] >= 30]

# Display the filtered DataFrame
high_quality_variants.head()
# Function to extract AF from INFO field
def get_af(info):
    if 'AF' in info:
        return info['AF'][0]
    return None

# Apply function to get allele frequencies
high_quality_variants['AF'] = high_quality_variants['INFO'].apply(get_af)

# Describe the allele frequencies
af_values = high_quality_variants['AF'].dropna()
af_values.describe()
high_quality_variants.to_csv('filtered_variants.csv', index=False)

## Function to extract AF from INFO field
def get_af(info):
    if 'AF' in info:
        return info['AF'][0]
    return None

# Apply function to get allele frequencies
high_quality_variants['AF'] = high_quality_variants['INFO'].apply(get_af)

# Filter variants with AF around 0.5 (between 0.45 and 0.55)
variants_af_around_0_5 = high_quality_variants[(high_quality_variants['AF'] >= 0.45) & (high_quality_variants['AF'] <= 0.55)]

# Display the filtered DataFrame
variants_af_around_0_5.head()

# Describe the filtered DataFrame to get summary statistics
variants_af_around_0_5.describe()


## Steps for Analysis Using Annotated Data
Review Annotations: Open the annotated.hg38_multianno.txt file to review the types of annotations that ANNOVAR has provided. This file will include information such as gene symbol, effect on the protein (e.g., non-synonymous SNP), functional predictions, and possibly links to disease databases.

Identify Key Variants: Focus on variants of interest, such as non-synonymous SNPs, frameshift mutations, or variants within regulatory regions, based on your research question. You can use the filtered_variants_annotated.vcf for a more refined dataset.





# Reference: Wang K, Li M, Hakonarson H. ANNOVAR: Functional annotation of genetic variants from next-generation sequencing data, Nucleic Acids Research, 38:e164, 2010
